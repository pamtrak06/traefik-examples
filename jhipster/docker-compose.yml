version: '3.7'

networks:
  net-traefik:
    external: true
    driver: bridge
  internal-network:
    internal: true

services:
  traefik:
    image: traefik:2.1
    container_name: "traefik"
    command:
      - "--log=true"
      - "--log.level=DEBUG"
      #- "--log.filePath=traefik.log"                  # Writing Logs to a File
      #- "--log.format=json"                           # Writing Logs to a File, in JSON
      - "--api.insecure=true"                          # Traefik will listen on port 8080 by default for API request.
      - "--providers.docker=true"                      # Enabling docker provider
      - "--providers.docker.exposedbydefault=false"    # Do not expose containers unless explicitly told so
      - "--entrypoints.web.address=:80"                # Traefik will listen to incoming request on the port 80 (HTTP)
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - "net-traefik"
      - "internal-network"

  jhipster-registry:  
    image: jhipster/jhipster-registry:v5.0.2
    container_name: "jhipster-registry"
    ports:
      - "8761:8761"
    labels:
      - "traefik.enable=true"                                                           # Explicitly tell Traefik to expose this container

      # Routers
      #- "traefik.http.routers.jhipster-registry.rule=Host(`registry.jhipster-portal`) && PathPrefix(`/registry`)"  #  The domain the service will respond to
      #- "traefik.http.routers.jhipster-registry.rule=Host(`registry.jhipster-portal`)"  #  The domain the service will respond to
      #- "traefik.http.routers.jhipster-registry.rule=Host(`jhipster-portal`) && PathPrefix(`/registry`)"  #  The domain the service will respond to
      - "traefik.http.routers.jhipster-registry.rule=Host(`jhipster-portal`)"  #  The domain the service will respond to
      - "traefik.http.routers.jhipster-registry.entrypoints=web"                        # Allow request only from the predefined entry point named "jhipster-registry"
      #- "traefik.http.routers.jhipster-registry.middlewares=stripprefix,redirect,redirect-app,redirect-content"
      - "traefik.http.routers.whoami.priority=2"

      # Services
      - "traefik.http.services.jhipster-registry.loadbalancer.server.port=8761"         # Tell Traefik to use the port 8761 to connect to `jhipster-registry`

      # Middlewares
      - "traefik.http.middlewares.stripprefix.stripprefix.prefixes=/registry,/registry/"

      - "traefik.http.middlewares.redirect.redirectregex.regex=^http://registry.jhipster-portal/(.*)"
      - "traefik.http.middlewares.redirect.redirectregex.replacement=http://registry.jhipster-portal/$${1}"
      - "traefik.http.middlewares.redirect.redirectregex.permanent=true"

      - "traefik.http.middlewares.redirect-app.redirectregex.regex=^http://registry.jhipster-portal/registry/app/(.*)"
      - "traefik.http.middlewares.redirect-app.redirectregex.replacement=http://registry.jhipster-portal/app/$${1}"
      - "traefik.http.middlewares.redirect-app.redirectregex.permanent=true"

      - "traefik.http.middlewares.redirect-content.redirectregex.regex=^http://registry.jhipster-portal/registry/content/(.*)"
      - "traefik.http.middlewares.redirect-content.redirectregex.replacement=http://registry.jhipster-portal/content/$${1}"
      - "traefik.http.middlewares.redirect-content.redirectregex.permanent=true"

    networks:
      net-traefik:
      internal-network:
        aliases:
          - registry.jhipster-portal


  whoami:
    image: "containous/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`jhipster-portal`) && PathPrefix(`/api`)"
      - "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.routers.whoami.priority=1"
      # - "traefik.http.routers.whoami.middlewares=redirect"

      # Services
      #- "traefik.http.services.jhipster-registry.loadbalancer.server.port=80"                       # Tell Traefik to use the port 80 to connect to `whoami`
      #- "traefik.http.services.jhipster-registry.loadbalancer.server.url=http://whoami/api"         # Tell Traefik to use the /api path of container whoami

      # Middlewares
      - "traefik.http.middlewares.redirect.redirectregex.regex=^http://jhipster-portal/api"
      - "traefik.http.middlewares.redirect.redirectregex.replacement=http://whoami/api"
      - "traefik.http.middlewares.redirect.redirectregex.permanent=true"

    networks:
      net-traefik:
